package org.penforge.backend.pentestReport;

import lombok.RequiredArgsConstructor;
import org.penforge.backend.common.GenericResponse;
import org.penforge.backend.statistics.PentestStaticsRequest;
import org.penforge.backend.statistics.StatisticsData;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/api/v1")
@RequiredArgsConstructor
public class PentestReportController {

    private final PentestReportService pentestReportService;

    @PostMapping("/report-generate")
    public ResponseEntity<byte[]> generatePdf(@RequestBody PentestReportRequest request) {
        try {
            byte[] pdfBytes = pentestReportService.generatePdfFromData(request.getReportId());

            HttpHeaders headers = new HttpHeaders();
            headers.setContentType(MediaType.APPLICATION_PDF);
            headers.setContentDispositionFormData("inline", "scan-report.pdf");

            return new ResponseEntity<>(pdfBytes, headers, HttpStatus.OK);
        } catch (Exception e) {
            e.printStackTrace(); // Hata loglamasÄ±
            return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }


    @GetMapping("/past-reports")
    public GenericResponse<List<PentestReport>> getPastReports(@RequestParam String userId) {
        try {
            List<PentestReport> reports = pentestReportService.getPastReports(userId);
            return new GenericResponse<List<PentestReport>>()
                    .setCode(200)
                    .setData(reports);
        } catch (Exception e) {
            e.printStackTrace();
            return new GenericResponse<List<PentestReport>>()
                    .setCode(400);
        }
    }

}
