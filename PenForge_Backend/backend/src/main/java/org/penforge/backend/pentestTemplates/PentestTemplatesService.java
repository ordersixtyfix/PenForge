package org.penforge.backend.pentestTemplates;

import lombok.AllArgsConstructor;
import org.penforge.backend.pentestScenarios.BindShellConnectService;
import org.penforge.backend.pentestScenarios.FtpBruteForceService;
import org.penforge.backend.pentestScenarios.SshBruteForceService;
import org.penforge.backend.pentestScenarios.WPAttackService;
import org.springframework.stereotype.Service;

@Service
@AllArgsConstructor
public class PentestTemplatesService {
    private final FtpBruteForceService ftpBruteForceService;
    private final SshBruteForceService sshBruteForceService;
    private final BindShellConnectService bindShellConnectService;
    private final WPAttackService wpAttackService;


        public String performPentest(String targetIp, String pentestScenario, String userId) throws Exception{
            switch (pentestScenario){
                case "ftpBruteForce":
                    return ftpBruteForceService.isPortOpen(targetIp, userId);
                case "sshBruteForce":
                    return sshBruteForceService.isPortOpen(targetIp, userId);
                case "bindShellAccess":
                    return bindShellConnectService.isPortOpen(targetIp, userId);
                case "wpAttack":
                    return wpAttackService.isPortOpen(targetIp, userId);
                default:
                    throw new IllegalArgumentException("Invalid pentest scenario");
            }
        }







}
