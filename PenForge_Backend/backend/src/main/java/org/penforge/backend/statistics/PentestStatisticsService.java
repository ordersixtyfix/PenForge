package org.penforge.backend.statistics;

import lombok.Data;
import lombok.AllArgsConstructor;
import org.penforge.backend.pentestReport.PentestReportRepository;
import org.springframework.stereotype.Service;
import org.penforge.backend.pentestReport.PentestReport;

import java.util.HashSet;
import java.util.List;
import java.util.Set;

@Service
@Data
@AllArgsConstructor
public class PentestStatisticsService {

    private final PentestReportRepository pentestReportRepository;

    public StatisticsData calculateStatistics(String userId) {

        List<PentestReport> reports = pentestReportRepository.findAllByUserId(userId)
                .orElse(List.of());

        Set<String> uniqueTargets = new HashSet<>();
        Set<String> vulnerableTargets = new HashSet<>();

        int totalOpenPorts = 0;

        for (PentestReport report : reports) {
            uniqueTargets.add(report.getTargetIP());
            totalOpenPorts += report.getPortData().size();
            if (!report.getCredentials().isEmpty()) {
                vulnerableTargets.add(report.getTargetIP());
            }
        }

        int totalTargets = uniqueTargets.size();
        int totalVulnerableTargets = vulnerableTargets.size();
        int totalTests = reports.size();

        return new StatisticsData(totalTargets, totalVulnerableTargets, totalOpenPorts, totalTests);
    }




}
